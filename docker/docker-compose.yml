services:
  web:
    build:
      context: ..
      dockerfile: docker/Dockerfile.slim
    command: ["python", "manage.py", "runserver", "0.0.0.0:8000"]
    env_file:
      - ../.env
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ..:/app
      - media:/app/media

  worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile.slim
    command: ["python", "-m", "celery", "-A", "config", "worker", "-l", "info"]
    env_file:
      - ../.env
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    volumes:
      - media:/app/media
  # no bind mount so the image .venv stays available
  # workers don't need to expose ports

  beat:
    build:
      context: ..
      dockerfile: docker/Dockerfile.slim
    command: ["python", "-m", "celery", "-A", "config", "beat", "-l", "info"]
    env_file:
      - ../.env
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    volumes:
      - media:/app/media
  # no bind mount so the image .venv stays available

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10

  db:
    image: postgres:16-alpine
    env_file:
      - ../.env
    ports:
      - "5433:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "hackathon"]
      interval: 5s
      timeout: 3s
      retries: 10

volumes:
  pgdata:
    external: true
    name: docker_pgdata
  media:
    external: true
    name: docker_media
