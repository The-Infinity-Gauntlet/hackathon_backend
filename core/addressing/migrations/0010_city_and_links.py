# Generated by Copilot on 2025-09-18
from django.db import migrations, models
import uuid


def seed_cities(apps, schema_editor):
    City = apps.get_model("addressing", "City")
    City.objects.get_or_create(name="Joinville")
    City.objects.get_or_create(name="Araquari")


def backfill_city_refs(apps, schema_editor):
    City = apps.get_model("addressing", "City")
    Region = apps.get_model("addressing", "Region")
    Neighborhood = apps.get_model("addressing", "Neighborhood")

    def _get_city_by_name(n):
        return City.objects.filter(name__iexact=n).first()

    for reg in Region.objects.all():
        if reg.city and not reg.city_ref_id:
            c = _get_city_by_name(reg.city)
            if c:
                reg.city_ref_id = c.id
                reg.save(update_fields=["city_ref"])
    for nb in Neighborhood.objects.all():
        if nb.city and not nb.city_ref_id:
            c = _get_city_by_name(nb.city)
            if c:
                nb.city_ref_id = c.id
                nb.save(update_fields=["city_ref"])


def forward(apps, schema_editor):
    seed_cities(apps, schema_editor)
    backfill_city_refs(apps, schema_editor)


def reverse(apps, schema_editor):
    City = apps.get_model("addressing", "City")
    City.objects.filter(name__in=["Joinville", "Araquari"]).delete()


class Migration(migrations.Migration):
    dependencies = [
        ("addressing", "0009_remove_address_addressing__neighbo_50804d_idx_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="City",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        primary_key=True,
                        default=uuid.uuid4,
                        editable=False,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=120, unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.AddField(
            model_name="region",
            name="city_ref",
            field=models.ForeignKey(
                null=True,
                blank=True,
                on_delete=models.SET_NULL,
                related_name="regions",
                to="addressing.city",
            ),
        ),
        migrations.AddField(
            model_name="neighborhood",
            name="city_ref",
            field=models.ForeignKey(
                null=True,
                blank=True,
                on_delete=models.SET_NULL,
                related_name="neighborhoods",
                to="addressing.city",
            ),
        ),
        migrations.RunPython(forward, reverse),
    ]
